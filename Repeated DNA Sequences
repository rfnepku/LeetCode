All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". 
When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.

Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

For example,

Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",

Return:
["AAAAACCCCC", "CCCCCAAAAA"].


//Save memory usage, change a 10 char long string into int
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        std::unordered_set<int> myset;
        vector<string> result;
        int size = s.size();
        
        if(size <= 10)
            return result;
        for(int i = 0; i <= size - 10; i++){
            string tmp = s.substr(i, 10);
            int num = strtonum(tmp);
            if(myset.find(num) == myset.end())
                myset.insert(num);
            else{
                if(std::find(result.begin(), result.end(), tmp) == result.end())
                    result.push_back(tmp);
            }
                result.push_back(tmp);
        }
        
        return result;
    }

private:
    int strtonum(string& s){
        int result = 0;
        for(int i = 0; i <= 9; i++){
            char c = s[i];
            if(c == 'A')
                result = result << 2 + 0;
            else if(c == 'C')
                result = result << 2 + 1;
            else if(c == 'G')
                result = result << 2 + 2;
            else
                result = result << 2 + 3;
        }
        return result;
    }
};
