Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

class Solution {
public:
    void helper(TreeNode* root, int& sub, int& total){
        sub = sub*10 + root->val;
        if(root->left == NULL && root->right == NULL){
            total += sub;
            return;
        }
        
        if(root->left != NULL && root->right == NULL){
            helper(root->left, sub, total);
            return;
        }
        
        if(root->left == NULL && root->right != NULL){
            helper(root->right, sub, total);
            return;
        }
        
        int tmp = sub;
        helper(root->left, sub, total);
        sub = tmp;
        helper(root->right, sub, total);
        return;
    }

    int sumNumbers(TreeNode* root) {
        int sub = 0;
        int total = 0;
        if(root == NULL)    return 0;
        helper(root, sub, total);
        return total;
    }
};
