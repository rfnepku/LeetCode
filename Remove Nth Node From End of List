Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head == NULL) return NULL;
        
        //two cases, remove head or other node
        ListNode* ptr1 = head;
        ListNode* ptr2 = head;
        for(int i = 0; i < n; i++)
            ptr2 = ptr2->next;
        
        if(ptr2 == NULL){
            head = head->next;
            return head;
        }
        
        while(ptr2->next != NULL){
            ptr2 = ptr2->next;
            ptr1 = ptr1->next;
        }
        ptr1->next = (ptr1->next)->next;
        
        return head;
    }
};
