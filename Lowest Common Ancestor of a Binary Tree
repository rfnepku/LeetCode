Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: 
“The lowest common ancestor is defined between two nodes v and w as the lowest node in T 
that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, 
since a node can be a descendant of itself according to the LCA definition.

//helper() return value means in node and its child nodes whether there exist p or q
//if both helper(left child) and helper(right child) are true, we modify the result to current node

class Solution {
public:
    bool helper(TreeNode* node, TreeNode* p, TreeNode* q, TreeNode*& result){
        if(node == NULL)
            return false;
        
        if(node == p){
            result = p;
            return true;
        }
        
        if(node == q){
            result = q;
            return true;
        }
        
        bool left = helper(node->left, p, q, result);
        bool right = helper(node->right, p, q, result);
        
        if(left && right){
            result = node;
            return true;
        }
        
        if(left || right)
            return true;
        
        return false;
    }

    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL)
            return NULL;
        
        TreeNode* result;
        helper(root, p, q, result);
        return result;
    }
};
