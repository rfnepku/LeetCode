Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.
Calling next() will return the next smallest number in the BST.
Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.


The stack process:(1). we always get the top of stack
                  (2). after we pop the current value of current node, we will push its right child and all sub left into stack...
                    
                    
                    
class BSTIterator {
private:
    stack<TreeNode*> mystack;
public:
    BSTIterator(TreeNode *root) {
        while(root != NULL){
            mystack.push(root);
            root = root->left;
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !mystack.empty();
    }

    /** @return the next smallest number */
    int next() {
        TreeNode* tmp = mystack.top();
        mystack.pop();
        
        TreeNode* tmp1 = tmp->right;
        while(tmp1 != NULL){
            mystack.push(tmp1);
            tmp1 = tmp1->left;
        }
        return tmp->val;
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
