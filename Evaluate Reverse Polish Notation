Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
  
  
//Like stack machine!

class Solution {
public:
    int evaluate(int num1, int num2, string& tmp){
        if(tmp == "+")
            return num1 + num2;
        else if(tmp == "-")
            return num1 - num2;
        else if(tmp == "*")
            return num1 * num2;
        else
            return num1 / num2;
    }

    int evalRPN(vector<string>& tokens) {
        int result = 0;
        int size = tokens.size();
        if(size == 0)   return result;
        
        stack<int> mystack;
        
        for(int i = 0; i < size; i++){
            string tmp = tokens[i];
            
            if(tmp == "+" || tmp == "-" || tmp == "*" || tmp == "/"){
                int num2 = mystack.top();
                mystack.pop();
                int num1 = mystack.top();
                mystack.pop();
                result = evaluate(num1, num2, tmp);
                mystack.push(result);
            }
            
            else{
                int num = std::stoi(tmp);
                mystack.push(num);
            }
        }
        
        return mystack.top(); 
    }
};
