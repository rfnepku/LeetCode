Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

//To solve this problem, we should pay attention to two things.

//the recursive relation: f(n, k) = f(n-1 , k), { f(n-1, k-1),n }

//the boundary condition:   k==1!!!  if we use k=0 as boundary condition, it will always lose answers


class Solution {
public:
    vector<vector<int>> helper(int n, int k){
        vector<vector<int>> result;
        if(n < k)   return result;
        if(k==0 ) return result;
        
        /*
        if(n == 1 && k==1){
            vector<int> tmp;
            tmp.push_back(1);
            result.push_back(tmp);
            return result;
        }
        */
        if(k == 1){
            for(int i = 0; i < n; i++){
                vector<int> tmp;
                tmp.push_back(i+1);
                result.push_back(tmp);
            }
            return result;
        }
        
        result = helper(n-1, k);
        vector<vector<int>> sub_result = helper(n-1, k-1);
        for(int i = 0; i < sub_result.size(); i++){
            vector<int> tmp = sub_result[i];
            tmp.push_back(n);
            result.push_back(tmp);
        }
        /*
        if(n == 2 && k==1){
            vector<int> tmp;
            tmp.push_back(2);
            result.push_back(tmp);
        }
        */
        return result;
    }

    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> result;
        if(n < k)   return result;
        result = helper(n, k);
        return result;
    }
};
