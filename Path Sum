// my first solution is wrong. it will take a root to non-leaf path as a candidate path.

/*
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
*/

//right solution
class Solution {
public:
    bool dfs(TreeNode* root, int sum, int current_sum){
        current_sum += root->val;
        if(root->left == NULL && root->right == NULL){
            if(current_sum == sum)  return true;
            else return false;
        }
        
        bool left_path = false;
        if(root->left != NULL)
            left_path = dfs(root->left, sum, current_sum);
        
        bool right_path = false;
        if(root->right != NULL)
            right_path = dfs(root->right, sum, current_sum);
        
        current_sum -= root->val;
        return (left_path || right_path);
    }

    bool hasPathSum(TreeNode* root, int sum) {
        if(root == NULL) return false;      //corner case: [], 0
        bool result = dfs(root, sum, 0);
        return result;
    }
};



// first solution
class Solution {
public:
    bool dfs(TreeNode* root, int sum, int current_sum){
        if(root == NULL){
            if(current_sum == sum)  return true;
            else return false;
        }
        
        current_sum += root->val;
        bool left_path = dfs(root->left, sum, current_sum);
        bool right_path = dfs(root->right, sum, current_sum);
        current_sum -= root->val;
        return (left_path || right_path);
    }

    bool hasPathSum(TreeNode* root, int sum) {
        if(root == NULL) return false;      //corner case: [], 0
        bool result = dfs(root, sum, 0);
        return result;
    }
};
