/*
Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

For example,
Given n = 3,

You should return the following matrix:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
*/

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> result;
        if(n == 0) return result;
        
        vector<int> tmp;
        if(n == 1){
            tmp.push_back(1);
            result.push_back(tmp);
            return result;
        }
        
        for(int i = 0; i < n; i++)
            tmp.push_back(0);
        
        for(int i = 0; i < n; i++)
            result.push_back(tmp);
        
        int left = 0; int right = n - 1;
        int up = 0; int down = n - 1;
        int num = 0;
        while(left < right){
            
            for(int j = left; j <= right; j++){
                num++;
                result[up][j] = num;
            }
            
            for(int i = up + 1; i <= down; i++){
                num++;
                result[i][right] = num;
            }
            
            for(int j = right - 1; j >= left; j--){
                num++;
                result[down][j] = num;
            }
            
            for(int i = down - 1; i >= up + 1; i--){
                num++;
                result[i][left] = num;
            }
            
            
            left++;
            right--;
            up++;
            down--;
        }
        
        num++;
        if(left == right) result[left][left] = num;
        
        return result;
        
    }
};
