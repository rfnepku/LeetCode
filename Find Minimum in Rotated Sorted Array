Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.
You may assume no duplicate exists in the array.


class Solution {
public:
    int findMin(vector<int>& nums) {
        int size = nums.size();
        if(size == 1)   return nums[0];
        
        int i = 0;
        int j = size - 1;
        
        while(i <= j){
            int k = (i + j)/2;
            
            //if k is 0, it means i, j must be 0, 1. Base situation
            if(j - i <= 1)
                return std::min(nums[i], nums[j]);
            
            if(nums[k] > nums[i] && nums[j] < nums[i])
                i = k + 1;
                
            else if(nums[k] > nums[i] && nums[j] > nums[i])
                return nums[i];
            
            //k might be 0, it is solved in base situation
            else if(nums[k] > nums[k-1])
                j = k - 1;
            else{
                return nums[k];   
            }
        }
        
    }
};
