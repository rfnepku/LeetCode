// recursion solution will have time exceed...
// use dp instead

/*
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/

//dynamic programming
class Solution {
public:
    int numTrees(int n) {
        int a[n+1];
        if(n == 0)  return 0;
        if(n == 1)  return 1;
        a[0] = 1;
        a[1] = 1;
        for(int i = 2; i < n+1; i++){
            // calculate a[i] when there are i elements
            a[i] = 0;
            for(int j = 0; j <= i-1; j++){
                a[i] += a[j] * a[i-1-j];
            }
        }
        return a[n];
    }
};


//recusion solution
class Solution {
public:
    int numTrees(int n) {
        if(n == 0)  return 0;
        if(n == 1)  return 1;
        
        int total = 0;
        for(int i = 0; i <= n-1; i++){
            if(i == 0 || i == n-1)
                total += numTrees(n-1);
            else
                total += numTrees(i) * numTrees(n-1-i); 
        }
            
        return total;
    }
};
