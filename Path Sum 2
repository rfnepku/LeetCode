Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int sum, int current_sum, vector<vector<int>>& result, vector<int>& path){
        current_sum += root->val;
        path.push_back(root->val);
        
        if(root->left == NULL && root->right == NULL){
            if(current_sum == sum)
                result.push_back(path);
            //return;     if here returns, path didn't pop back and current_sum didn't reduce value
        }
        
        if(root->left != NULL)
            dfs(root->left, sum, current_sum, result, path);
        
        if(root->right != NULL)
            dfs(root->right, sum, current_sum, result, path);
        
        //current_sum -= root->val;     actually no need for this sentence. sum is passed by value. The meaning of current_sum is the sum of all the number along the path from root to this current node
        path.pop_back();
        return;
    }

    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> result;
        vector<int> path;
        if(root == NULL)    return result;
        dfs(root, sum, 0, result, path);
        return result;
    }
};
