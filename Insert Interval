Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].
This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10]


//The hard part is some corner cases that should notice

class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        int size = intervals.size();
        if(size == 0 || newInterval.start > intervals[size-1].end){
            intervals.push_back(newInterval);
            return intervals;
        }
        
        //corner case i didn't notice
        if(newInterval.end < intervals[0].start){
            intervals.insert(intervals.begin(), newInterval);
            return intervals;
        }
        
        for(int i = 0; i < size; i++){
            if(newInterval.start > intervals[i].end)    continue;
            int startIndex = i, endIndex;
            int endLength;
            for(int j = startIndex; j < size; j++){
                endLength = std::max(intervals[j].end, newInterval.end);
                if(j == size - 1 || endLength < intervals[j+1].start){
                    endIndex = j;
                    break;
                }    
            }
            
            //another corner case
            if(newInterval.end < intervals[startIndex].start){
                intervals.insert(intervals.begin() + startIndex, newInterval);
                return intervals;
            }
            
            //corner case start should update
            intervals[startIndex].start = std::min(intervals[startIndex].start, newInterval.start);
            intervals[startIndex].end = endLength;
            intervals.erase(intervals.begin() + startIndex + 1, intervals.begin() + endIndex + 1);
            break;
        }
        
        return intervals;
    }
};
