//backtracing, flag[][]

/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
*/


class Solution {
public:

    bool check(vector<vector<char>>& board, vector<vector<bool>>& flag, int m, int n, int count, string& word){
        if(count == word.size())    return true;
        if(flag[m][n] == 1) return false;
        if(word[count] != board[m][n]) return false;
        flag[m][n] = 1;
        
        bool result = true;         //here should be true
        bool result1 = false;
        if(count + 1 == word.size()) return true;
        if(m > 0)                   result1 = result1 || check(board, flag, m - 1, n, count + 1, word);
        if(m < board.size() - 1)    result1 = result1 || check(board, flag, m + 1, n, count + 1, word);
        if(n > 0)                   result1 = result1 || check(board, flag, m, n - 1, count + 1, word);
        if(n < board[0].size() - 1) result1 = result1 || check(board, flag, m, n + 1, count + 1, word);
        
        
        if(result1 == false) flag[m][n] = 0;
        return result && result1;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int row_length = board.size();
        if(row_length == 0) return false;
        int col_length = board[0].size();
        if(col_length == 0) return false;
        
        vector<vector<bool>> flag;
        for(int i = 0; i < row_length; i++){
            vector<bool> tmp;
            for(int j = 0; j < col_length; j++){
                tmp.push_back(0);
            }
            flag.push_back(tmp);
        }
        
        for(int i = 0; i < row_length; i++)
            for(int j = 0; j < col_length; j++){
                if(board[i][j] == word[0]){
                    for(int u = 0; u < row_length; u++)
                        for(int v = 0; v < col_length; v++){
                            flag[u][v] = 0;
                    }
                    int count = 0;
                    bool result = check(board, flag, i, j, count, word); 
                    if(result) return true; 
                }    
            }
        
        return false;
    }
};
