Given a binary tree, imagine yourself standing on the right side of it, 
return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

//At first, I use if(root->right != NULL) ....  come into an infinite loop. Always remember we are pushing child of current node!!
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        if(root == NULL) return result;
        std::queue<TreeNode*> myqueue;
        myqueue.push(root);
        int count = 1;
        int cur = 1;
        while(!myqueue.empty()){
            TreeNode* tmp = myqueue.front();
            if(cur == count)
                result.push_back(tmp->val);
                
            myqueue.pop();
            count--;
            
            if(tmp->right != NULL)
                myqueue.push(tmp->right);
            
            if(tmp->left != NULL)
                myqueue.push(tmp->left);
            
            if(count == 0){
                count = myqueue.size();
                cur = count;
            }
        }
        
        return result;
        
    }
};
