/*
Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?
*/

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> previous;
        vector<int> now;
        
        if(rowIndex == 0){
            previous.push_back(1);
            return previous;
        }
        
        if(rowIndex == 1){
            previous.push_back(1);
            previous.push_back(1);
            return previous;
        }
        
        previous.push_back(1);
        
        for(int i = 1; i <= rowIndex; i++){
            previous.push_back(0);
            now = previous;
            for(int j = 0; j <= i; j++){
                if(j == 0)  now[j] = previous[j];
                else if(j == i) now[j] = previous[j-1];
                else now[j] = previous[j] + previous[j-1];
            }
            previous = now;
        }
        
        return previous;
   
    }
        
};
