Given a binary tree, return the zigzag level order traversal of its nodes' values. 
(ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

//very similar to level order traversal
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if(root == NULL) return result;
        
        queue<TreeNode*> myqueue;
        myqueue.push(root);
        
        int count = 1;
        bool flag = false;
        vector<int> vec_tmp;
        while(!myqueue.empty()){
            count--;
            TreeNode* node_tmp = myqueue.front();
            vec_tmp.push_back(node_tmp->val);
            myqueue.pop();
            if(node_tmp->left != NULL)
                myqueue.push(node_tmp->left);
            if(node_tmp->right != NULL)
                myqueue.push(node_tmp->right);
            
            if(count == 0){
                if(flag)
                    std::reverse(vec_tmp.begin(), vec_tmp.end());
                result.push_back(vec_tmp);
                vec_tmp.clear();
                count = myqueue.size();
                flag = !flag;
            }
        }
        
        return result;
        
    }
};
