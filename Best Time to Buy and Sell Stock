Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), 
design an algorithm to find the maximum profit.


//Brute force time complexity O(n2)
//DP O(n)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int max_profit = 0;
        int min_index = 0;
        int size = prices.size();
        if(size <= 1)   return 0;
        
        
        for(int i = 1; i < size; i++){
            if(prices[i] < prices[min_index])
                min_index = i;
            
            if((prices[i] - prices[min_index]) > max_profit)
                max_profit = prices[i] - prices[min_index];
        }
        
        return max_profit;
    }
};
