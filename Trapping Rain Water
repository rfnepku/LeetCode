//stack solution
//two trick place
class Solution {
public:
    int trap(vector<int>& height) {
        int size = height.size();
        stack<int> st;
        if(size < 3)    return 0;
        int sum = 0;

        for(int i = 0; i < size; i++){
            while(!st.empty() && height[i] > height[st.top()]){
                int last_index = st.top();
                st.pop();
                if(!st.empty())
                    sum += (i - st.top() - 1) * (std::min(height[i], height[st.top()]) - height[last_index]);
            }
            
            st.push(i);
        }
        
        return sum;
        
    }
};

//two traverse solution
class Solution {
public:
    int trap(vector<int>& height) {
        int size = height.size();
        height.push_back(1);
        vector<int> peak;
        if(size < 3)   return 0;
        int left[size];
        int right[size];
        int max_height_index = 0;
        
        for(int i = 1; i < size; i++){
            left[i] = max_height_index;
            if(height[i] > height[max_height_index])
                max_height_index = i;
        }
        
        max_height_index = size - 1;
        
        for(int i = size - 2; i >= 0; i--){
            right[i] = max_height_index;
            if(height[i] > height[max_height_index])
                max_height_index = i;
        }
        
        int sum = 0;
        for(int i = 1; i < size - 1; i++){
            sum += std::max(std::min(height[left[i]], height[right[i]]) - height[i], 0);
        }
        
        return sum;
        
    }
};
