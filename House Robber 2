Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place for his thievery 
so that he will not get too much attention. This time, all houses at this place are arranged in a circle. 
That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same 
as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, 
determine the maximum amount of money you can rob tonight without alerting the police.

class Solution {
public:
    int money(int begin, int end, vector<int>& nums){
        if(begin == end)
            return nums[begin];
        
        int a[end-begin+2];
        a[0] = 0;    //a[0] means only 0 house
        a[1] = nums[begin]; //a[1] means only 1 begin house
        
        for(int i = 2; i <= end-begin+1; i++){
            if(a[i-2] + nums[begin+i-1] > a[i-1])
                a[i] = a[i-2] + nums[begin+i-1];
            else
                a[i] = a[i-1];
        }
        
        return a[end-begin+1];
    }

    int rob(vector<int>& nums) {
        int size = nums.size();
        if(size == 0)   return 0;
        if(size == 1)   return nums[0];
        
        if(money(0, size-2, nums) > money(1, size-1, nums))
            return money(0, size-2, nums);
        else 
            return money(1, size-1, nums);
    }
};
