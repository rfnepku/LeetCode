Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
  
//In this kind of backtracking problem, always pay atterntion to interfere between each branches

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>>  result;
        helper(s, 0, s.size()-1, vector<string>(), result);
        return result;
    }
    
private:
    void helper(string& s, int begin, int end, vector<string> sub, vector<vector<string>>& result){
        if(begin > end){
            result.push_back(sub);
            return;
        }
        
        for(int i = 0; i < end-begin+1; i++){
            vector<string> sub_tmp = sub;   //need to have a copy, so that each branch will not interfere with each other
            string tmp = s.substr(begin, i+1);
            if(isValid(tmp)){
                sub_tmp.push_back(tmp);
                helper(s, begin+i+1, end, sub_tmp, result);
            }
        }
        
        return;
    }
    
    bool isValid(string& s){
        int i = 0;
        int j = s.size() - 1;
        while(i < j){
            if(s[i] != s[j])    return false;
            i++; j--;
        }
        return true;
    }
};
