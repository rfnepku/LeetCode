Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1]

//much better solution
//Proper backtracking and usage of reference, no extra large space is needed
//This problem is like backtracking(wise search), and is like DFS

class Solution {
public:
    void helper(vector<int>& nums, vector<vector<int>>& result, int i){
        if(i == nums.size()){
            result.push_back(nums);
            return;
        }
        
        for(int j = i; j < nums.size(); j++){
            std::swap(nums[i], nums[j]);
            helper(nums, result, i+1);
            std::swap(nums[i], nums[j]);
        }
        return;
    }

    vector<vector<int>> permute(vector<int>& nums) {
        int size = nums.size();
        vector<vector<int>> result;
        if(size == 0)   return result;
        
        helper(nums, result, 0);
        return result;
    }
};


class Solution {
public:
    vector<vector<int>> helper(vector<int>& nums, int last){
        vector<vector<int>> result;
        if(last == 0){
            vector<int> tmp(1, nums[last]);
            result.push_back(tmp);
            return result;
        }
        
        vector<vector<int>> sub = helper(nums, last-1);
        
        for(int i = 0; i < sub.size(); i++){
            vector<int> tmp = sub[i];
            tmp.push_back(nums[last]);
            for(int j = last; j >= 0; j--){
                swap(tmp[j], tmp[last]); //once made a silly mistake, swap(nums[j], nums[last])
                result.push_back(tmp);
                swap(tmp[j], tmp[last]);
            }
        }
        
        return result;
    }

    vector<vector<int>> permute(vector<int>& nums) {
        int size = nums.size();
        vector<vector<int>> result;
        if(size == 0)   return result;
        
        return helper(nums, size-1);
    }
};
