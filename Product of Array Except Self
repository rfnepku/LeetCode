Given an array of n integers where n > 1, nums, 
return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? 
(Note: The output array does not count as extra space for the purpose of space complexity analysis.)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int size = nums.size();
        int a[size];
        int b[size];
        vector<int> result(size);
        if(size == 0)   return result;
        
        a[0] = 1;
        for(int i = 1; i < size; i++){
            a[i] = a[i-1] * nums[i-1];
        }
        
        b[size-1] = 1;
        for(int i = size-2; i >= 0; i--){
            b[i] = b[i+1] * nums[i+1];
        }
        
        for(int i = 0; i < size; i++)
            result[i] = a[i] * b[i];
        
        return result;
        
    }
};

//follow up: use tmp to store temporary multiplication result
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int size = nums.size();
        vector<int> result(size);
        if(size == 0)   return result;
        
        int tmp = 1;
        for(int i = 0; i < size; i++){
            result[i] = tmp;
            tmp = tmp * nums[i];
        }
        
        tmp = 1;
        for(int i = size-1; i >= 0; i--){
            result[i] = tmp * result[i];
            tmp = tmp * nums[i];
        }
        
        return result;
        
    }
};

