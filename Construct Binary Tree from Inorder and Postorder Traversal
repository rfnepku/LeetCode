/* basic concept:
inorder: left, root, right
preorder: root, left, right
postorder: left, right, root
*/

/*
Given inorder and postorder traversal of a tree, construct the binary tree.
Note:
You may assume that duplicates do not exist in the tree.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* addNode(vector<int>& inorder, int in_begin, int in_end, vector<int>& postorder, int post_begin, int post_end){
        if(in_begin > in_end)   return NULL;
        TreeNode* root = new TreeNode(postorder[post_end]);
        int in_mid = in_begin;
        while(inorder[in_mid] != postorder[post_end])
            in_mid++;
        root->left = addNode(inorder, in_begin, in_mid-1, postorder, post_begin, post_begin + (in_mid-1-in_begin));
        root->right = addNode(inorder, in_mid+1, in_end, postorder, post_end-(in_end-in_mid), post_end-1);
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() == 0 || postorder.size() == 0)
            return NULL;
        
        TreeNode* root = addNode(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
        return root;
    }
};
