The set [1,2,3,â€¦,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note: Given n will be between 1 and 9 inclusive.

//Wisely choose the path i want by recusion. Backtracking plus each step's choice
//The return statement can be if(i == n-1)

class Solution {
public:
    void helper(int n, int k, int i, string& result, string& s, vector<int>& rest, int per){
        if(i == n-1){
            char tmp = rest[0] + '0';
            s.push_back(tmp);
            result = s;
            return;
        }
        
        per = per / (n - i);
        int num = (k-1) / per;
        char tmp = rest[num] + '0';
        rest.erase(rest.begin() + num);
        s.push_back(tmp);
        k = k - num * per;
        helper(n, k, i+1, result, s, rest, per);
        return;
    }

    string getPermutation(int n, int k) {
        string result, s;
        vector<int> rest;
        if(n == 0)  return result;
        
        int per = 1;
        for(int i = 1; i <= n; i++){
            per = per * i;
            rest.push_back(i);
        }
        
        helper(n, k, 0, result, s, rest, per);
        return result;
    }
};
