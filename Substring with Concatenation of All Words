You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.

For example, given:
s: "barfoothefoobarman"
words: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).


class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> result;
        int wordNum = words.size();
        if(wordNum == 0) return result;
        int wordLen = words[0].size();
        int comLen = wordLen * wordNum;
        std::unordered_map<string, int> dict;
        
        for(int i = 0; i < wordNum; i++)
            dict[words[i]]++;
        
        int size = s.size();
        //previously I directly use i < s.size() - comLen, 
        //it will not work for comparision between two types
        for(int i = 0; i <= size - comLen; i++){
            std::unordered_map<string, int> combineWord;
            bool flag = false;
            for(int j = 0; j < wordNum; j++){
                string tmpString;
                for(int k = 0; k < wordLen; k++){
                    int index = i + wordLen * j + k;
                    tmpString.push_back(s[index]);
                }
                if(dict.find(tmpString) == dict.end()){
                    flag = true;
                    break;
                }
                else
                    combineWord[tmpString]++;
                
                if(combineWord[tmpString] > dict[tmpString]){
                    flag = true;
                    break;
                }
            }
            if(flag)    continue;
            result.push_back(i);
        }
        
        return result;
    }
};
