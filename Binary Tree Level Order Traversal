Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

//the problem I encounter is that how to seperate values by level?? 

//the first solution is what i meant to use, but i didn't comee up with it. Make use of queue characteristics
//the second solution is to use a pair to keep track of height, which is tedious 
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        vector<int> level;
        queue<TreeNode*> myqueue;
        if(root == NULL) return result;
        myqueue.push(root);
        int count = 1;
        
        while(!myqueue.empty()){
            TreeNode* cur = myqueue.front();
            myqueue.pop();
            
            if(cur->left != NULL)   myqueue.push(cur->left);
            if(cur->right != NULL)  myqueue.push(cur->right);
            
            level.push_back(cur->val);
            count--;
            if(count == 0){
                result.push_back(level);
                level.clear();
                count = myqueue.size();
            }
        }
        
        return result;
    } 
};

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        queue<pair<int, int>> level;
        queue<pair<TreeNode*, int>> myqueue;
        if(root == NULL)    return result;
        myqueue.push(pair<TreeNode*, int>(root, 1));
        
        while(!myqueue.empty()){
            TreeNode* cur = myqueue.front().first;
            int height = myqueue.front().second;
            myqueue.pop();
            if(cur->left != NULL){
                myqueue.push(pair<TreeNode*, int>(cur->left, height+1));
            }
            if(cur->right != NULL){
                myqueue.push(pair<TreeNode*, int>(cur->right, height+1));
            }
            
            level.push(pair<int, int>(cur->val, height));
        }
        
        vector<int> tmp;
        int pre_height = 1;
        while(!level.empty()){
            int height = level.front().second;
            if(height != pre_height){
                result.push_back(tmp);
                tmp.clear();
                pre_height = height;
            }
            tmp.push_back(level.front().first);
            level.pop();
        }
        
        result.push_back(tmp);
        return result;
    }
};
