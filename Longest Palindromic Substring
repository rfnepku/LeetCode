Given a string S, find the longest palindromic substring in S.
You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

//Once figured out what should be going on, this problem is easy
//I used odd(string&s, int i, int j, int size, int& begin, int&end) and record begin and end inside this function, it will
//cause problem even if this has not produced maximum count, it will still modify begin and end.
//So pay attention to reference usage

//Of course, we can easily combine oddCount and evenCount into one function. But i find this is clear and not much need to combine
//int a single function

class Solution {
public:
    int oddCount(string& s, int i, int j, int size){
        int count = 1;
        while(i >= 0 && j <= size - 1){
            if(s[i] == s[j]){
                count += 2;
            }
            else
                break;
            i--; 
            j++;
        }
        return count;
    }
    
    int evenCount(string& s, int i, int j, int size){
        int count = 0;
        while(i >= 0 && j <= size - 1){
            if(s[i] == s[j]){
                count += 2;
            }
            else
                break;
            i--; 
            j++;
        }
        return count;
    }

    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 1)   return s;
        if(size == 2)   return (s[1]==s[0])? s : s.substr(0, 1);
        
        int count = 1;
        int begin;
        int end;
        
        for(int i = 1; i < size - 1; i++){
            if(oddCount(s, i-1, i+1, size) > count){
                count = oddCount(s, i-1, i+1, size);
                begin = i - (count-1)/2;
                end =  i + (count-1)/2;
            }
        }
        
        for(int i = 0; i < size -1; i++){
            if(evenCount(s, i, i+1, size) > count){
                count = evenCount(s, i, i+1, size);
                begin = i - (count-2)/2;
                end = i+1 + (count-2)/2;
            }
        }
        
        return s.substr(begin, end-begin+1);
    }
};
