Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)


//time exceed. Seems like O(n2) solution. Can't figure out why...
class Solution {
public:
    void addSolution(vector<pair<int, int>> vec1, vector<pair<int, int>> vec2, vector<vector<int>> result, vector<int> nums){
        for(int i = 0; i < vec1.size(); i++){
            for(int j = 0; j < vec2.size(); j++){
                int index1 = vec1[i].first;
                int index2 = vec1[i].second;
                int index3 = vec2[j].first;
                int index4 = vec2[j].second;
                if(index1 != index3 && index1 != index4 && index2 != index3 && index2 != index4){
                    vector<int> tmp;
                    tmp.push_back(nums[index1]);
                    tmp.push_back(nums[index2]);
                    tmp.push_back(nums[index3]);
                    tmp.push_back(nums[index4]);
                    std::sort(tmp.begin(), tmp.end());
                    result.push_back(tmp);
                }
            }   
        }
    }

    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        int size = nums.size();
        if(size < 4) return result;
        
        std::unordered_map<int, vector<pair<int, int>>> mymap;
        for(int i = 0; i <= size - 2; i++){
            for(int j = i+1; j <= size - 1; j++){
                std::pair<int, int> mypair = std::make_pair(i, j);
                int sum = nums[i] + nums[j];
                auto it = mymap.find(sum);
                if(it == mymap.end()){
                    vector<pair<int, int>> vec_tmp;
                    vec_tmp.push_back(mypair);
                    mymap[sum] = vec_tmp;
                }
                else{
                    vector<pair<int, int>> vec_tmp = mymap[sum];
                    vec_tmp.push_back(mypair);
                    mymap[sum] = vec_tmp;
                }
            }
        }
        
        for(auto it = mymap.begin(); it != mymap.end(); it++){
            int num1 = it->first;
            int num2 = target - num1;
            if(mymap.find(num2) != mymap.end()){
                addSolution(it->second, mymap[num2], result, nums);
            }
        }
        
        return result;
    }
};
