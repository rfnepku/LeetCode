Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Follow up:
Can you solve it without using extra space?


class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_set<ListNode*> myset;
        while(head != NULL){
            if(myset.insert(head).second){
                head = head->next;
            }
            else{
                return head;
            }
        }
        return NULL;
    }
};

//no extra space
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        int count = 0;
        ListNode* fast = head;
        ListNode* slow = head;
        bool hasCycle = false;
        while(fast != NULL && fast->next != NULL){
            count++;
            fast = (fast->next)->next;
            slow = slow->next;
            if(fast == slow){
                hasCycle = true;
                break;
            }
        }
        
        if(!hasCycle)   return NULL;
        
        fast = head;    
        slow = head;
        for(int i = 0; i < count; i++)
            fast = fast->next;
        while(fast != slow){
            fast = fast->next;
            slow = slow->next;
        }
        return fast;
    }
};

//even no need for count
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast = head;
        ListNode* slow = head;
        bool hasCycle = false;
        while(fast != NULL && fast->next != NULL){
            fast = (fast->next)->next;
            slow = slow->next;
            if(fast == slow){
                hasCycle = true;
                break;
            }
        }
        
        if(!hasCycle)   return NULL;
        //by now fast has moved 2 cycle length distance, slow moved 1 cycle lenght distance
        
        slow = head;
        while(fast != slow){
            fast = fast->next;
            slow = slow->next;
        }
        return fast;
    }
};
