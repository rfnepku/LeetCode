Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* p1 = headA;
        ListNode* p2 = headB;
        int count1 = 0;
        int count2 = 0;
        
        while(p1 != NULL){
            p1 = p1->next;
            count1++;
        }
        
        while(p2 != NULL){
            p2 = p2->next;
            count2++;
        }
        
        p1 = headA;
        p2 = headB;
        
        /*silly mistake
        if(count1 > count2){
            p1 = p1->next;
            count1--;
        }
        
        else if(count2 > count1){
            p2 = p2->next;
            count2--;
        }
        */
        while(count1 > count2){
            p1 = p1->next;
            count1--;
        }
        
        while(count2 > count1){
            p2 = p2->next;
            count2--;
        }
        
        while(p1 != NULL && p2 != NULL){
            if(p1 == p2){
                return p1;
            }
            p1 = p1->next; p2 = p2->next;
        }
        
        return NULL;
    }
};
