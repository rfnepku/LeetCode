Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).


//Add the two possible transactions together to see the max profit
//At first, I came up with a wrong solution, the failed testcase hints me a lot.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int size = prices.size();
        if(size < 2)    return 0;
        int result;
        int a[size]; //a[i] means from prices[0] to prices[i], the maxProfit with one transaction
        a[0] = 0;
        int min_index = 0;
        for(int i = 1; i < size; i++){
            if(prices[i] < prices[min_index])
                min_index = i;
            
            a[i] = a[i-1];
            if((prices[i] - prices[min_index]) > a[i])
                a[i] = prices[i] - prices[min_index];
        }
        
        int b[size];  //b[i] means from prices[i] to prices[size-1], the maxProfit with one transaction
        b[size-1] = 0;
        int max_index = size - 1;
        
        for(int i = size - 2; i >= 0; i--){
            if(prices[i] > prices[max_index])
                max_index = i;
                
            b[i] = b[i+1];
            if((prices[max_index] - prices[i]) > b[i])
                b[i] = prices[max_index] - prices[i];
        }
        
        result = a[size-1];
        for(int i = 0; i < size - 1; i++){
            if((a[i] + b[i+1]) > result)
                result = a[i] + b[i+1];
        }
        
        return result;
    }
};
