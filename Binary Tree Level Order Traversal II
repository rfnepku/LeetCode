Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
(ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

//very similar to level order traversal 1. Only use reverse at the end

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> result;
        if(root == NULL) return result;
        
        queue<TreeNode*> myqueue;
        myqueue.push(root);
        
        int count = 1;
        vector<int> vec_tmp;
        while(!myqueue.empty()){
            count--;
            TreeNode* node_tmp = myqueue.front();
            vec_tmp.push_back(node_tmp->val);
            myqueue.pop();
            if(node_tmp->left != NULL)
                myqueue.push(node_tmp->left);
            if(node_tmp->right != NULL)
                myqueue.push(node_tmp->right);
            
            if(count == 0){
                result.push_back(vec_tmp);
                vec_tmp.clear();
                count = myqueue.size();
            }
        }
        
        std::reverse(result.begin(), result.end());
        return result;
    }
};
