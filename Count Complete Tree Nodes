Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, 
and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.




//time exceed: BFS
class Solution {
public:
    int countNodes(TreeNode* root) {
        int count = 0;
        if(root == NULL) return 0;
        queue<TreeNode*> myqueue;
        myqueue.push(root);
        count++;
        
        while(!myqueue.empty()){
            TreeNode* node = myqueue.front();
            if(node->left != NULL){
                myqueue.push(node->left);
                count++;
            }
            else
                return count;
            
            if(node->right != NULL){
                myqueue.push(node->right);
                count++;
            }
            else
                return count;
            
            myqueue.pop();
        }
    }
};


// time exceed: recursion
class Solution {
public:
    void addNode(TreeNode* root, int& count){
        if(root->left != NULL) addNode(root->left, count);
        if(root != NULL) count++;
        if(root->right != NULL) addNode(root->right, count);
        return;
    }
    
    int countNodes(TreeNode* root) {
        int count = 0;
        if(root == NULL) return 0;
        addNode(root, count);
        return count;
    }
};
