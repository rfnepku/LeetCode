Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

//The key idea is wisely search along all paths using DFS

                      A
            A                           B
    A             B               A
      B       A       B     A           B
        B       B   A         B       A
          B      B   B          B       B
          
//stack is used to simulate the matching process. Actually we can get rid of stack by using a number keeping record of current stack element number         
class Solution {
public:
    void add(stack<char> mystack, int numA, string s, vector<string>& result){
        if(mystack.empty() && numA == 0){
            result.push_back(s);
        }
        else if(mystack.empty()){
            mystack.push('(');
            s = s + '(';
            add(mystack, numA-1, s, result);
        }
        else if(numA == 0){
            mystack.pop();
            s = s + ')';
            add(mystack, numA, s, result);
        }
        else{
            mystack.push('(');
            s = s + '(';
            add(mystack, numA-1, s, result);
            
            mystack.pop();
            mystack.pop();
            s[s.size()-1] = ')';
            add(mystack, numA, s, result);
        }
    }

    vector<string> generateParenthesis(int n) {
        vector<string> result;
        if(n == 0) return result;
        stack<char> mystack;
        add(mystack, n, string(), result);
        return result;
    }
};

//Without stack action, only keep record of stack number
class Solution {
public:
    void add(int num, int numA, string s, vector<string>& result){
        if(num == 0 && numA == 0){
            result.push_back(s);
        }
        else if(num == 0){
            s = s + '(';
            add(num+1, numA-1, s, result);
        }
        else if(numA == 0){
            s = s + ')';
            add(num-1, numA, s, result);
        }
        else{
            s = s + '(';
            add(num+1, numA-1, s, result);
            
            s[s.size()-1] = ')';
            add(num-1, numA, s, result);
        }
    }

    vector<string> generateParenthesis(int n) {
        vector<string> result;
        if(n == 0) return result;
        add(0, n, string(), result);
        return result;
    }
};



