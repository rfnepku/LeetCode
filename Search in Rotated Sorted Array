Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array


//discuss in several situations. Remember at lease one part is monotonically increasing...

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int size = nums.size();
        if(size == 0)   return -1;
        if(size == 1){
            return ((nums[0] == target)? 0 : -1);
        }
        
        int i = 0, j = size - 1, k;
        while(i <= j){
            k = (i + j ) / 2;
            
            //first situation
            if(nums[k] == target)   return k;
            
            //second situation
            else if(nums[k] < target){
                // i to k is increasing
                if(nums[i] < nums[k])   i = k + 1;
                else{
                    if(nums[j] == target)   return j;
                    else if(nums[j] < target)    j = k - 1;
                    else    i = k + 1;
                }
            }
            
            //third situation
            else{
                if(nums[k] < nums[j])   j = k - 1;
                else{
                    if(nums[i] == target)   return i;
                    else if(nums[i] < target)    j = k - 1;
                    else    i = k + 1;
                }
            }
        }
        
        return -1;
    }
};
