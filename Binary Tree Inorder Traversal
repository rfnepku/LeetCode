/*
Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?
*/

//solution 1: recursion
//solution 2: iteration
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:
    void addNode(vector<int>& result, TreeNode* root){
        if(root == NULL) return;
        addNode(result, root->left);
        result.push_back(root->val);
        addNode(result, root->right);
    }

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        addNode(result, root);
        return result;
    }
};

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        if(root == NULL)    return result;
        stack<TreeNode*> st;
        st.push(root);
        TreeNode* cur = root->left;       
        
        while(!st.empty() || cur != NULL){
            while(cur != NULL){
                st.push(cur);
                cur = cur->left;
            }
            
            result.push_back(st.top()->val);
            cur = st.top()->right;
            st.pop();
            
        }

        return result;   
    }
};

