Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

//many corner cases
//write those sentences in good logic


class Solution {
public:
    bool helper(string& s, string& p, int pos1, int pos2, vector<vector<char>>& v, int& len1, int& len2){
        bool val = false;
        if(pos1 == len1 && pos2 == len2)    return true;
        if(pos1 < len1 && pos2 == len2)     return false;
        
        if(pos1 == len1 && pos2 < len2){
            for(int i = pos2; i < len2; i++){
                if(i + 1 < len2 && p[i+1] == '*')
                    continue;
                if(p[i] != '*')
                    return false;
            }
            return true;
        }
        
        if(v[pos1][pos2] == '0')
            return false;
        
        if(v[pos1][pos2] == '1')
            return true;
            
        bool hasStar = false;
        if(p[pos2] == '*'){
            hasStar = true;
            for(int i = pos1; i <= len1; i++){
                if(i != pos1 && p[pos2-1] != '.' && s[i-1] != p[pos2-1])
                    break;
                val = helper(s, p, i, pos2+1, v, len1, len2);
                v[pos1][pos2] = val;
                if(val) return val;
            }
        }
        
        if(hasStar){
            v[pos1][pos2] = '0';
            return false;
        }
        
        if(pos1 < len1 && pos2 < len2){
            if(s[pos1] == p[pos2] || p[pos2] == '.')
                val = helper(s, p, pos1+1, pos2+1, v, len1, len2);
            if(val) {   v[pos1][pos2] = '1'; return true; }
            
            if(pos2 + 1 < len2 && p[pos2+1] == '*'){
                val = helper(s, p, pos1, pos2+2, v, len1, len2);
            }
            else
                val = false;
            
            if(val) {   v[pos1][pos2] = '1'; return true; }
            else    {   v[pos1][pos2] = '0'; return false;}
        }
        
        else return false;
        
    }

    bool isMatch(string s, string p) {
        int len1 = s.size();
        int len2 = p.size();
        //if(len1 > 100)  return false;
        vector<vector<char>> v;
        for(int i = 0; i < len1 + 1; i++){
            vector<char> tmp(len2 + 1, '2');
            v.push_back(tmp);
        }
        
        return helper(s, p, 0, 0, v, len1, len2);
    }
};
