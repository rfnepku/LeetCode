Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6

//the final output is not a[size-1], but max of a[i]
//if only one element, the return value is nums[0], not 0. a[0] is assigned 0 for convenient of recursion below

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int size = nums.size();
        if(size == 0)   return 0;
        if(size == 1)   return nums[0];
        int a[size];    //a[i] means from nums[0] to nums[i], the maxSubArray
        
        a[0] = std::max(nums[0], 0);
        int max = nums[0];
        
        for(int i = 1; i < size; i++){
            if(a[i-1] > 0)
                a[i] = a[i-1] + nums[i];
            else
                a[i] = nums[i];
            
            if(a[i] > max)
                max = a[i];
        }
        
        return max;
        
    }
};
