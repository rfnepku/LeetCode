Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

//learn to use heap: std::make_heap, std::pop_heap(), std::push_heap. 
//Pay attention that push_heap() and pop_heap() don't acctually push or pop elements, they just reorder to maintain the heap property
//The Comp used in heap algorithm is tricky. They are opposite from other algorithm like sort.... don't know why..

class Solution {
public:
    struct Comp{
        bool operator()(ListNode* l1, ListNode* l2){
            return l1->val > l2->val;       //to maintain a min heap
        }  
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int size = lists.size();
        if(size == 1) return lists[0];
        ListNode* dummy = new ListNode(0);
        ListNode* move = dummy;
        
        vector<ListNode*> container;
        for(int i = 0; i < size; i++){
            if(lists[i] != NULL){
                container.push_back(lists[i]);
            }
        }
        std::make_heap(container.begin(), container.end(), Comp());
        
        
        while(!container.empty()){
            ListNode* tmp = container.front();
            move->next = tmp;
            move = move->next;
            
            std::pop_heap(container.begin(), container.end(), Comp());
            container.pop_back();
            tmp = tmp->next;
            if(tmp != NULL){
                container.push_back(tmp);
                std::push_heap(container.begin(), container.end(), Comp());
            }
        }
        
        return dummy->next;
    }
};
