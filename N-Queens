The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

class Solution {
public:
    bool check(vector<int>& record, int row, int col){
        for(int i = 0; i < record.size(); i++){
            int j = record[i];
            if(j == col || std::abs(i - row) == std::abs(j - col))
                return true;
        }
        return false;
    }

    void helper(int i, int n, vector<int>& record, vector<vector<string>>& result){
        if(i == n){
            vector<string> vec_str;
            for(int k = 0; k < n; k++){
                int col = record[k];
                string s;
                for(int l = 0; l < n; l++){
                    if(l != col)
                        s.push_back('.');
                    else
                        s.push_back('Q');
                }
                vec_str.push_back(s);
            }
            
            result.push_back(vec_str);
            return;
        }
        
        for(int j = 0; j < n; j++){
            if(check(record, i, j))
                continue;
            else{
                record.push_back(j);
                helper(i+1, n, record, result);
                record.pop_back();
            }
        }
        return;
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        if(n == 0)  return result;
        vector<int> record;
        helper(0, n, record, result);
        return result;
    }
};
