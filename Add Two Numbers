You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


//1. Use dummy node to act as previous node for current node    2. Pay attention to final in bit
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p1 = l1;
        ListNode* p2 = l2;
        ListNode* dummy1 = new ListNode(0);
        dummy1->next = p1;
        ListNode* dummy2 = new ListNode(0);
        dummy2->next = p2;
        
        bool in = 0;
        
        if(p1 == NULL)  return l2;
        if(p2 == NULL)  return l1;
        
        
        while(p1 != NULL && p2 != NULL){
            int value = (p1->val + p2->val + in) % 10;
            in = (p1->val + p2->val + in) >= 10;
            p1->val = value;
            p2->val = value;
            p1 = p1->next;
            p2 = p2->next;
            dummy1 = dummy1->next;
            dummy2 = dummy2->next;
        }
        
        while(p1 != NULL){
            int value = (p1->val + in) % 10;
            in = (p1->val + in) >= 10;
            p1->val = value;
            p1 = p1->next;
            dummy1 = dummy1->next;
        }
        
        if(p2 == NULL){
            if(in){
                ListNode* highest = new ListNode(in);
                dummy1->next = highest;
            }
            return l1;
        }
        
        while(p2 != NULL){
            int value = (p2->val + in) % 10;
            in = (p2->val + in) >= 10;
            p2->val = value;
            p2 = p2->next;
            dummy2 = dummy2->next;
        }
        
        if(in){
            ListNode* highest = new ListNode(in);
            dummy2->next = highest;
        }
        return l2;
    }
};
