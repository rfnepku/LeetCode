Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

//needs to be thought over
//return a vector of TreeNode* is the first time I came across


class Solution {
public:
    vector<TreeNode*> helper(int begin, int end){
        vector<TreeNode*> result;
        if(begin > end){
            result.push_back(NULL);
            return result;
        }
        
        if(begin == end){
            TreeNode* root = new TreeNode(begin);
            result.push_back(root);
            return result;
        }
        
        for(int i = begin; i <= end; i++){
            //TreeNode* root = new TreeNode(i);
            vector<TreeNode*> left = helper(begin, i-1);
            vector<TreeNode*> right = helper(i+1, end);
            for(int j = 0; j < left.size(); j++){
                for(int k = 0; k < right.size(); k++){
                    TreeNode* root = new TreeNode(i);
                    root->left = left[j];
                    root->right = right[k];
                    result.push_back(root);
                }
            }
            //result.push_back(root);
        }
        return result;
    }

    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> result;
        //if(n == 0)  return result;
        result = helper(1, n);
        return result;
    }
};
