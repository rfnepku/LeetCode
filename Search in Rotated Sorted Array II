//there is a situation when we don't know go to left or right if nums[k] == nums[j] && nums[i] == nums[j]
 we have to traverse the vector


class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int size = nums.size();
        if(size == 0)   return false;
        if(size == 1){
            return ((nums[0] == target)? true : false);
        }
        
        int i = 0, j = size - 1, k;
        while(i <= j){
            k = (i + j ) / 2;
            
            //first situation
            if(nums[k] == target)   return true;
            
            //second situation
            else if(nums[k] < target){
                if(nums[i] == nums[k] && nums[i] == nums[j])
                    return search(i, j, nums, target);
                else if(nums[i] == nums[k] && nums[i] != nums[j])
                    i = k + 1;
                //i to k is increasing
                else if(nums[i] < nums[k])   i = k + 1;
                else{
                    if(nums[j] == target)   return true;
                    else if(nums[j] < target)    j = k - 1;
                    else    i = k + 1;
                }
            }
            
            //third situation
            else{
                if(nums[k] == nums[j] && nums[i] == nums[j])
                    return search(i, j, nums, target);
                else if(nums[k] == nums[j] && nums[i] != nums[j])
                    j = k - 1;
                else if(nums[k] < nums[j])   j = k - 1;
                else{
                    if(nums[i] == target)   return true;
                    else if(nums[i] < target)    j = k - 1;
                    else    i = k + 1;
                }
            }
        }
        
        return false;
    }
    
    bool search(int i, int j, vector<int>& nums, int target){
        for(int k = i; k <= j; k++)
            if(nums[k] == target)
                return true;
        return false;
    }
};
