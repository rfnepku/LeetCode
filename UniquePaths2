/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
*/


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int row_length = obstacleGrid.size();
        if(row_length == 0) return 0;
        int col_length = obstacleGrid[0].size();
        if(col_length == 0) return 0;
        
        if(row_length == 1){
            int result = 1;
            for(int j = 0; j < col_length; j++){
                if(obstacleGrid[0][j])  result = 0;
            }
            return result;
        }
        
        if(col_length == 1){
            int result = 1;
            for(int i = 0; i < row_length; i++){
                if(obstacleGrid[i][0])  result = 0;
            }
            return result;
        }
        
        int a[row_length][col_length];
        int tmp = 1;
        for(int j = 0; j < col_length; j++){
            tmp = tmp && (!obstacleGrid[0][j]);
            a[0][j] = tmp;
        }
        
        tmp = 1;
        for(int i = 0; i < row_length; i++){
            tmp = tmp && (!obstacleGrid[i][0]);
            a[i][0] = tmp;
        }
        
        for(int i = 1; i < row_length; i++)
            for(int j = 1; j < col_length; j++){
                if(obstacleGrid[i][j]) a[i][j] = 0;
                else a[i][j] = a[i - 1][j] + a[i][j - 1];
            }
        return a[row_length - 1][col_length - 1];
        
    }
};
