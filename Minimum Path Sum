/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right 
which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time
*/

class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
        int row = grid.size();
        if(!row) return 0;
        
        int col = grid[0].size();
        if(!col) return 0;
        
        int sum[row][col];
        int i, j;
        
        sum[0][0] = 0;
        
        if(row == 1 && col == 1)
            return grid[0][0];
        
        if(row > 1){
            sum[0][0] = grid[0][0];
            for(i = 1; i < row; i++)
                sum[i][0] = sum[i-1][0] + grid[i][0];
            if(col == 1)
                return sum[row-1][0];
        }
        
        if(col > 1){
            sum[0][0] = grid[0][0];
            for(j = 1; j < col; j++)
                sum[0][j] = sum[0][j-1] + grid[0][j];
            if(row == 1)
                return sum[0][col-1];
        }
        
        for(i = 1; i < row; i++)
            for(j = 1; j < col; j++){
                sum[i][j] = (sum[i-1][j] < sum[i][j-1])? 
                (sum[i-1][j] + grid[i][j]):(sum[i][j-1] + grid[i][j]);
            }
        return sum[row-1][col-1];
    }
};
