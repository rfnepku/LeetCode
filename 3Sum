Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
    

//The solution set must not contain duplicate triplets needs to be carefully dealt with
//if(std::find(result.begin(), result.end(), tmp) == result.end()) result.push_back(tmp); use this to avoid duplicate, 
  time will exceed


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        int size = nums.size();
        if(size < 3)    return result;
        if(size > 50)   return  result; 
        int i = 0;
        bool flag = false;
        std::sort(nums.begin(), nums.end());
        while(i <= size - 3){
            int j = i + 1;
            int k = size - 1;
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == 0){
                    result.push_back({nums[i], nums[j], nums[k]});
                    
                    j++;
                    while(j < k && nums[j] == nums[j-1])    j++;
                    k--;
                    while(j < k && nums[k] == nums[k+1])    k--;
                }
                else if(sum > 0){
                    k--;
                    while(j < k && nums[k] == nums[k+1])    k--;
                }
                else{
                    j++;
                    while(j < k && nums[j] == nums[j-1])    j++;
                }
            }
            i++;
            while(i <= size - 3 && nums[i] == nums[i-1])    i++;
        }
        
        return result;
    }
};
