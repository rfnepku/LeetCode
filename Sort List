Sort a linked list in O(n log n) time using constant space complexity.

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        
        if(head->next->next == NULL){
            ListNode* new_head = head;
            if(head->val > head->next->val){
                new_head = head->next;
                head->next->next = head;
                head->next = NULL;
            }   
            return new_head;
        }
        
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }

        ListNode* head1 = head;
        ListNode* head2 = slow->next;
        slow->next = NULL;
        
        ListNode* l1 = sortList(head1);
        ListNode* l2 = sortList(head2);
        ListNode* new_head = merge(l1, l2);
        
        return new_head;
    }
    
    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode* dummy = new ListNode(0);
        ListNode* l3 = dummy;
        while(l1 != NULL && l2 != NULL){
            if(l1->val < l2->val){
                l3->next = l1;
                l1 = l1->next;
                l3 = l3->next;
            }
            else{
                l3->next = l2;
                l2 = l2->next;
                l3 = l3->next;
            }
        }
        
        while(l1 != NULL){
            l3->next = l1;
            l3 = l3->next;
            l1 = l1->next;
        }
        
        while(l2 != NULL){
            l3->next = l2;
            l3 = l3->next;
            l2 = l2->next;
        }
         
        return dummy->next;
    }
};
