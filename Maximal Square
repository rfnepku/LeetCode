Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.


//Do a preprocess step
//Time complexity is O(n3)
//while(imax < m.size() && m[imax][j] >= val). once wrote imax < m[i].size() by mistake, causes segmentation fault

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        vector<vector<int>> m;
        for(int i = 0; i < matrix.size(); i++){
            vector<int> vec;
            for(int j = 0; j < matrix[i].size(); j++){
                int tmp = matrix[i][j] - '0';
                vec.push_back(tmp);
            }
            m.push_back(vec);
        }
                
        for(int i = 0; i < m.size(); i++){
            for(int j = 1; j < m[i].size(); j++){
                if(m[i][j] == 1)
                    m[i][j] = m[i][j-1] + 1;
            }
        }
        
        int max = 0;
        for(int i = 0; i < m.size(); i++){
            for(int j = 0; j < m[i].size(); j++){
                if(m[i][j] > max){
                    calc(i, j, m[i][j], max, m);   
                }
            }
        }
    
        return max*max;
    }
    
private:
    void calc(int i, int j, int val, int& max, vector<vector<int>>& m){
        int imin = i;
        int imax = i;
        while(imin >= 0 && m[imin][j] >= val)
            imin--;
            
        while(imax < m.size() && m[imax][j] >= val)
            imax++;
        
        int local_max = std::min(val, imax-imin-1);
        if(local_max > max)
            max = local_max;
        return;
    }

};
