Given a sorted array of integers, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

//two break sentences are important

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> result;
        int size = nums.size();
        
        int i = 0, j = size - 1, k;
        while(i <= j){
            k = (i + j) / 2;
            if(nums[k] < target)    i = k + 1;
            else if(nums[k] > target)   j = k - 1;
            else    break;
        }
        
        if(i > j){
            result.push_back(-1);
            result.push_back(-1);
            return result;
        }
        
        int low, high;
        int tmp = k;
        while(i <= k){
            if(nums[k] < target)    break;
            low = (i + k)/2;
            if(nums[low] == target)
                k = low - 1;
            else if(nums[low] < target)
                i = low + 1;
        }
      
        k = tmp;
        while(k <= j){
            if(nums[k] > target)    break;
            high = (k + j) /2;
            if(nums[high] == target)
                k = high + 1;
            else if(nums[high] > target)
                j = high - 1;
        }
        
        result.push_back(low);
        result.push_back(high);
        return result;
        
    }
};
